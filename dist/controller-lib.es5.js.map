{"version":3,"file":"controller-lib.es5.js","sources":["../src/service/Logger.ts","../src/model/base.ts","../src/model/contract.ts","../src/model/action-descriptor.ts","../src/model/message.ts","../src/model/multipart.ts","../src/model/fact.ts","../src/model/receipt.ts","../src/model/controller-descriptor.ts","../src/model/key.ts","../src/model/certificate.ts","../src/model/realm.ts","../src/model/controller-binding.ts","../src/model/mandate.ts","../src/model/mandate-token.ts","../src/handler/Controller.ts","../src/service/Integrity.ts","../src/service/Storage.ts"],"sourcesContent":["\nexport class Logger {\n\n    static logger = (name:string) => {\n        return new Logger(name);\n    }\n\n    name:String = \"\";\n\n    constructor(name:string) {\n        this.name = name;\n    }\n\n    public static create(name:string):Logger {\n        return Logger.logger(name);\n    }\n\n    public log(message:string, ...args:any[]) {\n        console.log(this.name, \":\", message, ...args)\n    }\n\n    public error(message:string, ...args:any[]) {\n        console.error(message + args?args.join(\",\"):\"\")\n    }\n\n    public debug(message:string, ...args:any[]) {\n        console.debug(message + args?args.join(\",\"):\"\")\n    }\n\n    public info(message:string, ...args:any[]) {\n        console.info(message + args?args.join(\",\"):\"\")\n    }\n\n\n}\n","import * as jose from \"node-jose\"\n\nexport class Base {\n\n  static verifier = jose.JWS.createVerify();\n\n  context: string;\n  type: string;\n  subtype: string;\n  timestamp: Date;\n  id: string;\n  certificateChain: string;\n\n  signed: string;\n\n  constructor(obj?: any) {\n    if (obj != undefined && obj != null) {\n      this.id = obj[\"@id\"];\n      this.context = obj[\"@context\"];\n      this.type = obj[\"@type\"];\n      this.subtype = obj[\"@subtype\"];\n      if (obj[\"@timestamp\"] != undefined) this.timestamp = new Date(obj[\"@timestamp\"]);\n      this.certificateChain = obj[\"@certificateChain\"];\n      this.signed = obj.signed;\n    } else {\n      this.context = 'https://brickchain.com/schema';\n      this.type = 'base';\n      this.timestamp = new Date(Date.now());\n    }\n  }\n\n  public static parseSigned<T extends Base>(c: { new(obj?: any): T }, signed: any, id?: string): Promise<T> {\n    let jws: any;\n    if (typeof (signed) == 'string') {\n      jws = JSON.parse(signed);\n    } else {\n      jws = signed;\n    }\n    return Base.verifier.verify(jws)\n      .then(function (result) {\n        let payload = result.payload.toString('utf-8');\n        let document = new c(JSON.parse(payload));\n        if (id != undefined && id != null) {\n          document.id = id;\n        }\n        document.signed = JSON.stringify(jws);\n        return document;\n      });\n  }\n\n  public toString() {\n    return JSON.stringify(this, null, 2);\n  }\n\n  public toJSON(): any {\n    let obj: any = {};\n    obj[\"@id\"] = this.id;\n    obj[\"@context\"] = this.context;\n    obj[\"@type\"] = this.type;\n    obj[\"@subtype\"] = this.subtype;\n    obj[\"@timestamp\"] = this.timestamp;\n    obj[\"@certificateChain\"] = this.certificateChain;\n    obj[\"signed\"] = this.signed;\n    return obj;\n  }\n\n}\n","import { Base } from './base';\n\nexport class Contract extends Base {\n\n  text: string;\n\n  constructor(obj?: any) {\n    super(obj);\n    if (obj != undefined && obj != null) {\n      this.text = obj.text;\n    }\n    this.type = 'contract'\n  }\n\n  public toJSON(): any {\n    let obj = super.toJSON();\n    obj.text = this.text;\n    return obj;\n  }\n\n}\n","import { Base } from \"./base\";\nimport { Contract } from \"./contract\";\n\nexport class ActionDescriptor extends Base {\n\n  label: string;\n  realm: string;\n  roles: string[];\n  icon: string;\n  data: any;\n  contract: Contract;\n  keyLevel: number;\n  uiURI: string;\n  actionURI: string;\n  params: any;\n\n  hasMandate: boolean;\n\n  constructor(obj?: any) {\n    super(obj);\n    if (obj != undefined && obj != null) {\n      this.label = obj.label;\n      this.roles = obj.roles;\n      this.icon = obj.icon;\n      this.data = JSON.stringify(obj);\n      this.contract = new Contract(obj.contract);\n      this.keyLevel = obj.keyLevel;\n      this.uiURI = obj.uiURI;\n      this.actionURI = obj.actionURI;\n      this.params = obj.params;\n    }\n    this.type = 'action-descriptor'\n  }\n\n  public toJSON(): any {\n    let obj = super.toJSON();\n    obj.label = this.label;\n    obj.roles = this.roles;\n    obj.icon = this.icon;\n    obj.data = this.data;\n    obj.contract = this.contract;\n    obj.keyLevel = this.keyLevel;\n    obj.uiURI = this.uiURI;\n    obj.actionURI = this.actionURI;\n    obj.params = this.params;\n    return obj;\n  }\n\n}\n","import { Base } from \"./base\";\n\nexport class Message extends Base {\n\n    title: string\n    message: string\n\n    constructor(obj?: any) {\n        super(obj)\n        this.type = 'message'\n        this.title = obj.title\n        this.message = obj.message\n    }\n\n    public toJSON(): any {\n        let obj = super.toJSON()\n        obj.title = this.title\n        obj.message = this.message\n        return obj\n    }\n}","import { Base } from \"./base\";\n\nexport class Part {\n  encoding: string;\n  name: string;\n  document: string;\n  uri: string;\n}\n\nexport class Multipart extends Base {\n\n  parts: Part[];\n\n  constructor(obj?: any) {\n    super(obj);\n    this.parts = obj.parts;\n    this.type = 'multipart'\n  }\n\n  public toJSON(): any {\n    let obj = super.toJSON();\n    obj.parts = this.parts;\n    return obj;\n  }\n\n}\n","import jose from 'node-jose';\nimport { Base } from \"./base\";\n\nexport class Fact extends Base {\n\n  ttl: number;\n  issuer: string;\n  label: string;\n  data: any;\n  recipient: any;\n  isdefault: boolean = false;\n  inactive: boolean = false;\n\n  constructor(obj?: any) {\n    super(obj);\n    if (obj) {\n      this.ttl = obj.ttl ? obj.ttl : 0;\n      this.issuer = obj.iss;\n      this.label = obj.label;\n      this.data = obj.data;\n      if (obj.recipient) {\n        jose.JWK.asKey(obj.recipient, 'json').then(key => this.recipient = key);\n      }\n    }\n  }\n\n  public toJSON(): any {\n    let obj = super.toJSON();\n    obj.ttl = this.ttl;\n    obj.issuer = this.issuer;\n    obj.label = this.label;\n    obj.data = this.data;\n    obj.recipient = this.recipient;\n    obj.isdefault = this.isdefault;\n    obj.inactive = this.inactive;\n    return obj;\n  }\n\n  getIcon(): string {\n    return Fact.getIconForType(this.subtype);\n  }\n\n  static isNativeFact(t: string) {\n    return t == 'name' || t == 'phone' || t == 'email' || t == 'picture';\n  }\n\n  static getIconForType(type: string): string {\n    switch (type) {\n      case 'name':\n        return 'md-person';\n      case 'phone':\n        return 'md-call';\n      case 'email':\n        return 'md-mail';\n      case 'picture':\n        return 'md-camera';\n      case 'dummy':\n        return 'md-happy';\n      case 'facebook':\n        return 'logo-facebook';\n      case 'google':\n        return 'logo-google';\n      default:\n        return 'md-help-circle';\n    }\n  }\n\n}\n","import { Base } from \"./base\";\n\nexport class Receipt extends Base {\n\n  label: string;\n  role: string;\n  action: string;\n  viewuri: string;\n  jwt: string;\n  intervals: Array<any>;\n  params: any;\n\n  constructor(obj?: any) {\n    super(obj);\n    if (obj) {\n      this.label = obj.label;\n      this.role = obj.role;\n      this.action = obj.action;\n      this.viewuri = obj.viewuri;\n      this.jwt = obj.jwt;\n      this.params = obj.params;\n      if (obj.intervals) {\n        this.intervals = obj.intervals.map(interval => {\n          return {\n            start: new Date(interval.start),\n            end: new Date(interval.end)\n          };\n        });\n      }\n    }\n    this.type = 'receipt';\n  }\n\n  public toJSON(): any {\n    let obj = super.toJSON();\n    obj.label = this.label;\n    obj.role = this.role;\n    obj.viewuri = this.viewuri;\n    obj.jwt = this.jwt;\n    obj.intervals = this.intervals;\n    obj.params = this.params;\n    return obj;\n  }\n\n}\n","import { Base } from \"./base\";\nimport { Part } from \"./multipart\";\nimport { Realm } from \"./realm\";\nimport * as jose from \"node-jose\";\n\nexport class ControllerDescriptor extends Base {\n\n  label: string;\n  realm: string;\n  actionsURI: string;\n  adminUI: string;\n  bindURI: string;\n  key: jose.Key|any;  // requires promise so we need to store then JSON part if so.\n  keyPurposes: string[];\n  requireSetup: boolean;\n  addBindingEndpoint: string;\n  icon: string;\n\n  constructor(obj?: any, key?:jose.Key) {\n    super(obj);\n    if (obj) {\n      this.label = obj.label;\n      this.realm = obj.realm;\n      this.actionsURI = obj.actionsURI;\n      this.adminUI = obj.adminUI;\n\n      if (key) this.key = key;\n      else this.key = obj.key;\n\n      this.keyPurposes = obj.keyPurposes;\n      this.requireSetup = obj.requireSetup;\n      this.addBindingEndpoint = obj.addBindingEndpoint;\n      this.icon = obj.icon;\n    }\n  }\n\n  public toJSON():any {\n    let obj = super.toJSON()\n    obj.key = this.key;\n    obj.label = this.label;\n    obj.actionsURI = this.actionsURI;\n    obj.adminUI = this.adminUI;\n    obj.keyPurposes = this.keyPurposes;\n    obj.requireSetup = this.requireSetup;\n    obj.addBindingEndpoint = this.addBindingEndpoint;\n    obj.icon = this.icon;\n    obj.realm = this.realm;\n\n    return obj;\n  }\n\n}\n","\nimport * as jose from \"node-jose\"\nimport * as crypto from \"crypto\"\n\n/**\n * Name and public key, optionally private key.\n *\n */\n\nexport class Key {\n\n  name: string;\n  id: string;\n\n  privateKey: jose.Key;\n  publicKey: jose.Key;\n  certificateChain: string;\n  level: number;\n  timestamp: number;\n  timeout: number;\n  encryptedKey: string;\n  signedPublicKey: any;\n\n  constructor(name: string, privateKey?: jose.Key) {\n    this['@type'] = 'key';\n    this.name = name;\n    if (privateKey) {\n      this.privateKey = privateKey;\n    }\n  }\n\n  public static makeKey(name: string, privateKey?: any): Promise<Key> {\n    let key = new Key(name, privateKey);\n    return key.thumbprint64()\n      .then(thumb => {\n        key.setID(thumb)\n        return jose.JWK.asKey(privateKey.toJSON(), 'json')\n      })\n      .then(publicKey => {\n          key.publicKey = publicKey;\n          return key;\n      });\n  }\n\n  public getPublicKey():Promise<jose.Key> {\n\n    if (this.publicKey) return Promise.resolve(this.publicKey)\n    if (this.privateKey) {\n      return jose.JWK.asKey(this.privateKey.toJSON(), 'json')\n        .then(puKey => this.publicKey = puKey)\n        .then(()=>this.publicKey)\n    }\n\n    return Promise.reject(\"\")\n  }\n\n  public isEncrypted():boolean {\n    return this.encryptedKey?true:false;\n  }\n\n  public hasPrivateKey():boolean {\n    return this.privateKey || this.encryptedKey\n  }\n\n  public setID(id: string): Promise<Key> {\n    this.id = id;\n\n    let pl = []\n    if (this.privateKey != undefined && this.privateKey != null) {\n      let key = this.privateKey.toJSON(true);\n      key.kid = id;\n      pl.push(jose.JWK.asKey(key, 'json').then(key => this.privateKey = key))\n    }\n    if (this.publicKey != undefined && this.publicKey != null) {\n      let key = this.publicKey.toJSON();\n      key.kid = id;\n      pl.push(jose.JWK.asKey(key, 'json').then(key => this.publicKey = key))\n    }\n\n    return Promise.all(pl).then(() => this)\n\n  }\n\n  // Decrypt Key\n  public decryptKey(pin: string): Promise<string> {\n      let hash = crypto.createHash('sha256').update(pin, 'utf8').digest()\n      let decipher = crypto.createDecipher(\"aes256\", hash)\n      let decrypted = decipher.update(this.encryptedKey, 'base64', 'utf8')\n      decrypted += decipher.final('utf8')\n      return Promise.resolve(decrypted)\n  }\n\n  // Encrypts key with pin, used for storage (aes256-base64-string)\n  public encryptKey(pin: string): Promise<string> {\n      let hash = crypto.createHash('sha256').update(pin, 'utf8').digest()\n      let encrypt = crypto.createCipher('aes256', hash)\n      let encrypted = encrypt.update(this.privateKey.toJSON(true), \"utf8\", \"base64\")\n      encrypted += encrypt.final('base64')\n      this.encryptedKey = encrypted\n      return Promise.resolve(encrypted)\n  }\n\n  public getPrivateKey(pin?:string):Promise<jose.Key> {\n    if (this.isEncrypted() && this.privateKey == null) {\n        return this.decryptKey(pin)\n                .then(decrypted => jose.JWK.asKey(JSON.parse(decrypted), 'json'))\n                .then((privateKey:any) => {\n                    this.privateKey = privateKey;\n                    if (!this.privateKey.kid) {\n                        this.privateKey.kid = this.id\n                    }\n                    return this.privateKey\n                })\n    } else {\n        if (!this.privateKey) return Promise.resolve(undefined)\n        if (!this.privateKey.kid) this.privateKey.kid = this.id\n        return Promise.resolve(this.privateKey)\n    }\n  }\n\n  public sign(input: any, pin?:string, compact:boolean = false): Promise<string> {\n\n    let buf = (typeof (input) == 'string') ? input : JSON.stringify(input)\n    return this.getPrivateKey(pin)\n      .then(privateKey => {\n          let opt = {\n              key: this,\n              reference: 'jwk',\n              fields: {kid: privateKey.kid}\n          }\n          return jose.JWS.createSign(compact?{ format: 'compact'}:{},opt)\n              .update(buf, 'utf8').final()\n      })\n  }\n\n  public thumbprint(hash = 'SHA-256'): Promise<string> {\n    return this.publicKey.thumbprint(hash)\n       .then(bytes =>\n           Buffer.from(bytes).toString('hex').replace(/(.{4})/g, '$1 ').trim());\n  }\n\n  public thumbprint64(hash = 'SHA-256'): Promise<string> {\n    return this.publicKey.thumbprint(hash)\n       .then(bytes => jose.util.base64url.encode(bytes));\n  }\n\n  public toJSON(): string {\n    let k: Key = Object.assign({}, this);\n    if (this.isEncrypted()) delete k.privateKey;\n    else {\n       if (this.privateKey) k.privateKey = this.privateKey.toJSON(true);\n    }\n    return JSON.stringify(k)\n  }\n\n  public toObject(): any {\n    let k: Key = Object.assign({}, this);\n    k.publicKey = this.publicKey.toObject()\n    return k\n  }\n\n  public static fromJSON(data: string): Promise<Key> {\n\n    let obj = JSON.parse(data);\n    let key = new Key(obj.name);\n    Object.assign(key, obj);\n\n    let privKey = (typeof(obj.privateKey) === 'object') ? JSON.stringify(obj.privateKey) : obj.privateKey\n    let publKey = (typeof(obj.publicKey) === 'object') ? JSON.stringify(obj.publicKey) : obj.publicKey\n\n    let pubJson = publKey?jose.JWK.asKey(publKey, 'json'):Promise.resolve(null)\n    let priJson = privKey?jose.JWK.asKey(privKey, 'json'):Promise.resolve(null)\n\n    return Promise.all([pubJson,priJson])\n           .then((keys:jose.Key[])=>{\n               key.publicKey = keys[0]\n               key.privateKey = keys[1]\n               return key\n           })\n  }\n\n}\n","export class Certificate {\n\n  timestamp: Date;\n  ttl: number;\n  root: any;\n  subKey: any;\n  keyLevel: number;\n  keyType: string;\n  documentTypes: string[];\n\n  constructor(poj?:any) {\n      if (poj) {\n        this.timestamp = poj.timestamp;\n        this.ttl = poj.ttl;\n        this.root = poj.root;\n        this.subKey = poj.subKey;\n        this.keyLevel = poj.keyLevel;\n        this.keyType = poj.keyType;\n        this.documentTypes = poj.documentTypes;\n      }\n  }\n\n  public hasExpired(): boolean {\n    return Date.now() > this.timestamp.getTime() + this.ttl;\n  }\n\n  public allowedType(docType: string): boolean {\n    return ('*' in this.documentTypes) || (docType in this.documentTypes);\n  }\n\n}\n","import {Base} from './base'\n\nexport class Realm extends Base {\n\n  name: string;\n  timestamp: Date;\n  description: string;\n  publicKey: any;\n  endpoint:string;\n  versions: string[];\n  inviteURL: string;\n  servicesURL: string;\n  keyHistory: string[];\n  actionsURL: string;\n  icon: string;\n  banner: string;\n\n  public constructor(obj?:any) {\n    super(obj);\n    if (obj) {\n      this.name = obj.name;\n      this.timestamp = new Date(obj.timestamp);\n      this.description = obj.description;\n      this.publicKey = obj.publicKey; // TODO: parse via node-jose\n      this.endpoint = obj.endpoint;\n      this.versions = obj.versions;\n      this.inviteURL = obj.inviteURL;\n      this.servicesURL = obj.servicesURL;\n      this.keyHistory = obj.keyHistory;\n      this.actionsURL = obj.actionsURL;\n      this.icon = obj.icon;\n      this.banner = obj.banner;\n    }\n  }\n\n  public toJSON():any {\n    let obj = super.toJSON()\n    Object.assign(obj, this);\n    return obj;\n  }\n\n}\n","import { Base } from \"./base\";\nimport { Part } from \"./multipart\";\nimport { Realm } from \"./realm\";\n\nexport class ControllerBinding extends Base {\n\n  realmDescriptor: Realm;\n  adminRoles:string[];\n  controllerCertificateChain:string;\n  mandate:string;\n\n  constructor(obj?: any) {\n    super(obj);\n    if (obj) {\n      this.realmDescriptor = new Realm(obj.realmDescriptor);\n      this.mandate = obj.mandate;\n      this.controllerCertificateChain = obj.controllerCertificateChain;\n      this.adminRoles = obj.adminRoles;\n    }\n  }\n\n  public toJSON(): any {\n    let obj = super.toJSON();\n    if (this.realmDescriptor) obj.realmDescriptor = this.realmDescriptor.toJSON();\n    obj.mandate = this.mandate;\n    obj.adminRoles = this.adminRoles;\n    obj.controllerCertificateChain = this.controllerCertificateChain;\n\n    return obj;\n  }\n\n}\n","import jose from 'node-jose';\nimport { Base } from \"./base\";\n\nexport class Mandate extends Base {\n\n  role: string;\n  label: string;\n  ttl: number;\n  recipient: string;\n  recipientName: string;\n  recipientPublicKey: any;\n  requestId: string;\n  sender: string;\n  params: {};\n\n  constructor(obj?: any) {\n    super(obj);\n    if (obj) {\n      this.role = obj.role;\n      this.label = obj.label;\n      this.ttl = obj.ttl ? obj.ttl : 0;\n      this.recipient = obj.recipient;\n      this.recipientName = obj.recipientName;\n      if (obj.recipientPublicKey) {\n        jose.JWK.asKey(obj.recipientPublicKey, 'json').then(key => this.recipientPublicKey = key);\n      }\n      this.requestId = obj.requestId;\n      this.sender = obj.sender;\n      this.params = obj.params;\n    }\n    this.type = 'mandate';\n  }\n\n  public toJSON(): any {\n    let obj = super.toJSON();\n    obj.role = this.role;\n    obj.label = this.label;\n    obj.ttl = this.ttl;\n    obj.recipient = this.recipient;\n    obj.recipientName = this.recipientName;\n    obj.recipientPublicKey = this.recipientPublicKey;\n    obj.requestId = this.requestId;\n    obj.sender = this.sender;\n    obj.params = this.params;\n    return obj;\n  }\n\n  getRealm(): string {\n    let parts = this.role ? this.role.split(\"@\", 2) : [];\n    return parts.length == 2 ? parts[1] : undefined;\n  }\n\n  getShortRole(): string {\n    let parts = this.role ? this.role.split(\"@\", 2) : [];\n    return parts.length == 2 ? parts[0] : undefined;\n  }\n\n  getIcon(): string {\n    return 'md-key';\n  }\n\n}\n","import { Base } from \"./base\";\n\nexport class MandateToken extends Base {\n\n  mandate: string;\n  uri: string;\n  ttl: number;\n\n  constructor(obj?: any) {\n    super(obj);\n    if (obj) {\n      if (this.timestamp == null) this.timestamp = new Date(Date.now());\n      this.mandate = obj.mandate;\n      this.uri = obj.uri;\n      this.ttl = obj.ttl;\n    }\n    this.type = 'mandate-token';\n  }\n\n  public toJSON(): any {\n    let obj = super.toJSON();\n    obj.mandate = this.mandate;\n    obj.uri = this.uri;\n    obj.ttl = this.ttl;\n    return obj;\n  }\n\n}\n","\nimport * as express  from \"express\";\n\nimport { Logger } from \"../service/Logger\"\nimport { Integrity } from \"../service/Integrity\"\n\nimport * as jose from \"node-jose\"\n\nimport {ActionDescriptor,ControllerBinding} from \"../model\"\n\n/**\n * A generic controller interface for binding with a single realm\n * and handling keys & certificates. After binding to a realm\n * the realm is locked with this controller. There is no -\n * multi realm handling in this controller.\n *\n * @author brickchain\n */\nexport class Controller {\n\n    logger:Logger\n    integrity:Integrity // store realm and controller keys.\n\n    bindingSecret:string;\n    apiUri:string;\n    adminUI:string;\n    binding:any;\n    bindFunc:(realmUrl:string,realmId:string,binding:any)=>any\n    listActions:(baseurl:string,baseuri:string,realmName:string)=>Array<ActionDescriptor>\n\n    constructor(\n        integrity:Integrity,\n        fun:(binding:any)=>void,\n        bindingSecret?:string) {\n\n        if (bindingSecret) {\n          this.bindingSecret = bindingSecret;\n        } else {\n          this.bindingSecret = \"\"+Math.floor(Math.random()*100000000);\n        }\n\n        this.logger = Logger.create(\"handler.Controller\")\n        this.integrity = integrity\n        this.bindFunc = fun\n\n        this.getBinding()\n        .then(b => {\n            if (b) {\n              this.logger.info(\"binding: \"+JSON.stringify(b))\n              fun(b)\n            } else {\n              this.logger.info(\"Not bound yet, Secret: \"+this.bindingSecret)\n            }\n        })\n        .catch(err => {\n            this.logger.debug(err)\n            this.logger.info(\"Not bound. Waiting for binding. Secret: \" +\n                              this.bindingSecret)\n        })\n    }\n\n    public setAdminURL(url:string) {\n        this.adminUI = url;\n    }\n\n    /**\n    * Add controller with binding endpoint to express Application,\n    *  via some base (default = \"/api\")\n    */\n    public addRoutes(app: express.Application, base:string = \"/api\") {\n\n        this.apiUri = base;\n        app.options(base+\"/descriptor\", this.originOptions.bind(this))\n        app.options(base+\"/bind\", this.originOptions.bind(this))\n        app.options(base+\"/actions\", this.originOptions.bind(this))\n        app.get(base+\"/descriptor\", this.descriptor.bind(this))\n        app.post(base+\"/bind\", this.binder.bind(this))\n        app.delete(base+\"/bind\", this.unbinder.bind(this))\n        app.get(base+\"/actions\", this.actions.bind(this))\n\n    }\n\n    private addCORS(res:express.Response) : void {\n        res.header('Access-Control-Allow-Origin', '*')\n        res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE')\n        res.header('Access-Control-Allow-Headers', 'Content-Type,X-Requested-With,Authorization,Accept,Origin')\n    }\n\n    public getBinding() : Promise<ControllerBinding> {\n\n        if (this.binding) return Promise.resolve(this.binding)\n        else return this.integrity.getControllerBinding()\n            .then((binding:ControllerBinding) => {\n              this.binding = binding;\n              return binding;\n            })\n    }\n\n    // returns forwarded or otherwise reqested \"http[s]://host[:port]\"\"\n    public myHost(req:express.Request) : string {\n\n        let fHost = req.get(\"x-forwarded-host\")\n        let fProto = req.get(\"x-forwarded-proto\")\n        if (fProto) fProto = fProto.split(',')[0]\n        let baseurl = (fProto ? fProto : req.protocol) + '://' + (fHost ? fHost : req.get('host'))\n        if (fHost) this.logger.info(\"forwarded-host: \"+baseurl)\n        return baseurl;\n\n    }\n\n    // GET /controller/descriptor\n    public descriptor(req:express.Request, res:express.Response) : void {\n\n        this.addCORS(res)\n\n        this.getDescriptor()\n            .then(descriptor => {\n\n                let baseurl = this.myHost(req)\n                let baseuri = this.apiUri;\n\n                // ensure realm-admin-ui/browser can read from this host.\n                this.addCORS(res)\n\n                descriptor.actionsURI = baseurl + baseuri + \"/actions\";\n                descriptor.adminUI = baseurl + baseuri + this.adminUI;\n                descriptor.bindURI = baseurl + baseuri + \"/bind\";\n\n                this.logger.info(\"descriptor: \",\n                    JSON.stringify(descriptor, null, 2))\n\n                res.json(descriptor)\n            })\n            .catch(err => {\n                this.logger.error(\"error! \", err)\n                if (err.stack) this.logger.error(\"error! \", err.stack)\n                res.status(500).send(\"error: \" + err)\n            })\n    }\n\n    // build descriptor with key and refernces to actions.\n    public getDescriptor(): Promise<any> {\n        return this.integrity.getMyID()\n            .then((keyId:string) => {\n                this.logger.debug(\"got key: \"+keyId)\n                return this.integrity.getKey(keyId)\n            })\n            .then((mykey:any) => mykey.getPublicKey())\n            .then((myPublicKey:any) => {\n                return {\n                    \"@type\": \"controller-descriptor\",\n                    label:\"\", // TODO: add member for controller id.\n                    key: myPublicKey.toJSON(),\n                    keyPurposes: [\n                        {\n                            documentType:\"purpose/bind\",\n                            required: true,\n                            description: \"attach controller to realm\"\n                        }\n                    ]\n                }\n            })\n    }\n\n    // POST /controller/\n    public binder(req:express.Request, res:express.Response) : void {\n\n        this.addCORS(res)\n\n        if (!req.body) {\n            res.status(400).send(\"missing post data.\")\n            return\n        }\n\n        if (!req.query.secret) {\n            res.status(400).send(\"missing '?secret=...'\")\n            return\n        }\n\n        if (req.query.secret != this.bindingSecret) {\n          res.status(400).send(\"secret param does not match secret.\")\n          return\n        }\n\n        this.getBinding()\n        .then(bound => {\n\n          if (bound) {\n              res.status(400).send(\"controller already bound.\")\n              return\n          }\n\n          this.logger.info(\"post bind <= \"+JSON.stringify(req.body))\n          this.logger.info(\"binder got: \"+req.body)\n\n          let signed = req.body\n          let verified = null\n          let realmKey = null\n          let binding:ControllerBinding = null\n\n          return this.integrity.verify(signed)\n            .then((v:any) => {\n              verified = v\n              this.logger.info(\"binder verified: \"+v)\n\n              return Promise.all([\n                  jose.JWK.asKey(verified.header.jwk),\n                  verified.payload.toString(\"utf8\")\n              ])\n            })\n            .then((l:any[]) => {\n              realmKey = l[0]\n              let data = l[1]\n              let b = JSON.parse(data)\n              this.logger.info(\"binder received: \", data)\n              binding = new ControllerBinding(b)\n              return this.setBinding(binding, realmKey)\n            })\n            .then((done:boolean)=> {\n              this.logger.info(\"responded: \", 201, \"data: \", JSON.stringify(done))\n              let realmName = binding.realmDescriptor.name;\n              let realmUrl = \"https://\"+realmName+\"/realm-api\"\n              this.listActions = this.bindFunc(realmUrl,realmName,binding)\n              res.status(201).json({})\n            })\n        })\n        .catch((err:Error) => {\n          this.logger.error(\"error! \", err)\n          if (err.stack) this.logger.error(\"error! \", err.stack)\n          res.status(500).send(\"error: \" + err)\n        })\n\n    }\n\n    // DELETE /controller/\n    public unbinder(req:express.Request, res:express.Response) : void {\n        this.getBinding()\n        .then(binding => {\n            this.logger.info(\"requesting binding delete.\")\n            this.binding = null;\n            return this.integrity.deleteControllerBinding()\n        })\n        .then(done => {\n            this.logger.info(\"deleted: \"+done)\n            res.status(201).send(\"\")\n        })\n        .catch(err => {\n          this.logger.error(\"error! \", err)\n          if (err.stack) this.logger.error(\"error! \", err.stack)\n          res.status(500).send(\"error: \" + err)\n        })\n    }\n\n    // create binding with realm\n    public setBinding(binding:ControllerBinding, realmKey: jose.Key) : Promise<any> {\n\n        this.logger.info(\"binding: \", JSON.stringify(binding, null, 2))\n        this.logger.info(\" with realmKey: \", JSON.stringify(realmKey, null, 2))\n\n        return Promise.all([\n            this.integrity.verify(binding.controllerCertificateChain),\n            this.integrity.verify(binding.mandate)\n        ])\n            .then((l:any[]) => {\n                let cver = l[0]\n                let mver = l[1]\n                return Promise.all([\n                    cver.payload.toString(\"utf8\"),\n                    mver.payload.toString(\"utf8\"),\n                    jose.JWK.asKey(cver.header.jwk),\n                    jose.JWK.asKey(mver.header.jwk),\n                ])\n            })\n            .then((l:any[])=>{\n                let cert = JSON.parse(l[0])\n                let mand = JSON.parse(l[1])\n                let ckey:jose.Key = l[2]\n                let mkey:jose.Key = l[3]\n                this.logger.debug(\"cert: \", cert)\n                this.logger.debug(\"mandate: \", mand)\n                // TODO: store keys to crypt\n                this.binding = binding\n                return this.integrity.setControllerBinding(binding)\n            })\n    }\n\n    public originOptions(req:express.Request, res:express.Response) : void {\n        this.addCORS(res)\n        res.sendStatus(201)\n    }\n\n    public actions(req:express.Request, res:express.Response) : void {\n\n        this.addCORS(res)\n\n        let baseurl = this.myHost(req)\n        let baseuri = this.apiUri;\n        let realmName = this.binding.realmDescriptor.name;\n        let realmUrl = \"https://\"+realmName+\"/realm-api\"\n        let actions = this.listActions?\n            this.listActions(baseurl,baseuri,realmName)\n                .map(a => a.toJSON()):\n            Array<any>()\n\n        res.json(actions)\n    }\n\n}\n","\nimport * as crypto from \"crypto\"\nimport * as jose from \"node-jose\"\n\nimport {Logger} from './Logger';\nimport {Key,Realm,Mandate,ControllerBinding} from '../model'\nimport {Storage} from \"./Storage\"\n\nvar logger = Logger.create(\"Integrity\");\n\n/**\n * Service, realm keys and other IDs.\n * Key handling for integrity clients and controllers.\n */\n\nexport class Integrity {\n\n    private storage: Storage;\n    private keys: {[name:string]:Key} = {} // mapping (name->Key)\n    private myOwnKeyID:string = \"\" // our private key name\n    private secret:string // secret used to encrypt keys\n    private binding:ControllerBinding;\n    private verifier: jose.JWS.Verifier;\n\n    public constructor(storage: Storage, secret: string) {\n\n        this.storage = storage\n        this.secret = secret\n        this.verifier = jose.JWS.createVerify()\n\n        this.storage.get(\"keyID\")\n            .then(keyID => {\n\n                if (keyID) {\n                    if (typeof(keyID) != 'string')\n                        throw new Error(\"bad type on keyID \"+ typeof(keyID))\n                    logger.debug(\"constructor\", \"init found keyID: \", keyID)\n                    this.myOwnKeyID = keyID\n                    return Promise.resolve(keyID)\n\n                } else throw new Error(\"keyID not found. \")\n            })\n            .catch(err => {\n                logger.error(\"error retreving private key:\", err)\n                logger.info(\"constructor\", \"missing key, creating...\")\n\n                return this.generateKey(\"root\")\n                    .then(key => this.storeKey(key).then(k => key))\n                    .then(key => this.setMyRoot(key))\n                    .then(() => {\n                        logger.debug(\"constructor\", \"new key stored.\", this.myOwnKeyID)\n                        return Promise.resolve(this.myOwnKeyID)\n                    })\n                    .catch(err => {\n                        logger.error(err)\n                    })\n            })\n    }\n\n    // returns name of key that is my own root key.\n    public getMyID(): Promise<string> {\n        if (this.myOwnKeyID) {\n            return Promise.resolve(this.myOwnKeyID)\n        }\n\n        return this.storage.get(\"keyID\")\n            .then(keyID => {\n                this.myOwnKeyID = keyID\n                return keyID\n            })\n    }\n\n    // store key as root-key for this party and\n    // save name of myID to the key id\n    //    (or name if key if we are missing key id)\n    // it stores the key to the underlying storage.\n    public setMyRoot(key: Key) : Promise<string> {\n        if (!key.id) {\n            key.id = key.name\n        }\n        this.myOwnKeyID = key.id;\n        return this.storage.set('keyID', key.id);\n    }\n\n    // create EC/P-256: key and cache it (its not stored)\n    // add key to storage with name, create with optional key-id\n    public generateKey(name: string, id?: string): Promise<Key> {\n\n        let keystore = jose.JWK.createKeyStore()\n\n        return keystore.generate('EC', 'P-256')\n            .catch((error:any) => logger.error(\"generateKey-creation \", error))\n            .then((privateKey:any) => {\n                let key = new Key(name, privateKey)\n                if (id) return key.setID(id)\n                else return Promise.resolve(key)\n            })\n            .then((key:Key) => {\n                this.keys[name] = key\n                return key\n             })\n            .catch((error:Error) => logger.error(\"generateKey-binding \", error))\n\n    }\n\n    // Adds a singed key as \"signedPublicKey\" to key.\n    public signPublicKey(key: Key): Promise<jose.Key> {\n        let pubkey = key.publicKey.toJSON();\n        delete pubkey.kid;\n        return key.getPrivateKey(this.secret)\n            .then(privateKey=>\n              jose.JWS.createSign(\n                { format: 'flattened' },\n                { key: privateKey, reference: 'jwk' }\n              )\n              .update(JSON.stringify(pubkey), 'utf8').final())\n            .then((jws:any) => JSON.stringify(jws))\n            .then((json:string) => key.signedPublicKey = json)\n            .then(() => key)\n    }\n\n    // private part of key is encrypted, use this to read it.\n    public getPrivateKey(key: Key): Promise<jose.Key> {\n        return key.getPrivateKey(this.secret)\n          .then(privateKey => {\n            this.keys[key.name].privateKey = privateKey;\n            return Promise.resolve(privateKey)\n          })\n    }\n\n    // stores key, using the keys own name, removes decryptped\n    // private key if its available next to an encryption.\n    // keys are stored with \"key_\"-prefix.\n    public storeKey(key: Key) : Promise<string> {\n        logger.debug(\"storeKey\", \" with key.name: \"+key.name)\n        let k: Key = Object.assign({}, key);\n        if (key.isEncrypted() && key.encryptedKey) delete k.privateKey;\n        else k.privateKey = key.privateKey.toJSON(true);\n        return this.storage.set(`key_${key.name}`, JSON.stringify(k))\n    }\n\n    public clearCache() {\n        this.keys = {};\n    }\n\n    public deleteKey(name:string):Promise<any> {\n        if (this.keys[name]) delete this.keys[name]\n        return this.storage.delete(name)\n    }\n\n\n    // add a Key JSON packed key with name to memory storage\n    private parseAndAddKey(name:string, json:string): Promise<Key> {\n        return Key.fromJSON(json)\n            .then((key:Key) => {\n                this.keys[name] = key;\n                return key\n            })\n    }\n\n    public getMyKey(): Promise<Key> {\n        return this.getMyID().then(myId=>this.getKey(myId))\n    }\n\n    public getKey(name: string): Promise<Key> {\n        if (this.keys[name]) {\n            return Promise.resolve().then(() => <Key> this.keys[name]);\n        } else {\n            return this.storage.get(\"key_\"+name)\n            .then(data => {\n                if (data != null) {\n                    return this.parseAndAddKey(name, data)\n\n                } else {\n                    return Promise.reject(`No key found for ${name}`);\n                }\n            });\n        }\n    }\n\n    public createCertificateChain(\n        subKey: jose.Key,\n        keyType: string = '*',\n        documentTypes: string[] = ['*'],\n        ttl: number = 3600): Promise<jose.Key> {\n\n        return this.getKey('root')\n            .then(rootKey => <jose.CertificateChain> {\n                timestamp: new Date(),\n                root: rootKey.publicKey,\n                subKey: subKey.publicKey,\n                keyType: keyType,\n                documentTypes: documentTypes,\n                ttl: ttl,\n            })\n            .then(chain => this.signCompact('root', chain))\n            .then(chain => subKey.certificateChain = chain)\n            .then(() => subKey)\n    }\n\n\n    public sign(keyName: string, input: any): Promise<string> {\n        return this.getKey(keyName)\n          .then((key:Key)=>key.sign(input, this.secret))\n    }\n\n    public signCompact(keyName: string, input: any): Promise<string> {\n        return this.getKey(keyName)\n          .then((key:Key)=>key.sign(input, this.secret, true))\n    }\n\n    public encrypt(recipient: any, input: any): Promise<any> {\n        let buf = (typeof (input) == 'string') ? input : JSON.stringify(input)\n        return jose.JWE.createEncrypt(\n          { protect: ['enc'], contentAlg: 'A256GCM' },recipient)\n          .update(buf).final()\n    }\n\n    // validate and return verify result\n    public verify(data: any): Promise<any> {\n        return this.verifier.verify(data)\n    }\n\n    // validate and return payload as string\n    public verified(data: any): Promise<string> {\n        return this.verify(data)\n            .then(verified =>  verified.payload.toString(\"utf8\"))\n    }\n\n    // parse realm description, verify signature and store keys.\n    public parseSignedRealm(name: string, signed: any): Promise<Realm> {\n      let jws = typeof (signed) == 'string' ? JSON.parse(signed) : signed;\n      return this.verifier.verify(jws)\n        .then(result => {\n          let obj = JSON.parse(result.payload);\n          if (name != '*' && obj.name != name) return Promise.reject(\"Name does not match\");\n          return obj;\n        })\n        .then(obj => {\n          let realm = Object.assign(new Realm(), obj);\n          realm.timestamp = new Date(obj[\"@timestamp\"]);\n          realm.signed = JSON.stringify(jws);\n          realm.icon = obj.icon ? obj.icon : '';\n          realm.banner = obj.banner ? obj.banner : '';\n          return jose.JWK.asKey(obj.publicKey, 'json')\n            .then(key => realm.publicKey = key)\n            .then(() => realm);\n        });\n    }\n\n    private verifyRealmHistory(realm: Realm): Promise<string> {\n      let prevKey: any = realm.publicKey;\n      let pl: Promise<any>[] =\n        realm.keyHistory.reverse()\n        .map((eventJWS) => this.verifier.verify(eventJWS))\n\n      return Promise.all(pl)\n        .then(events=>{\n          events.forEach((event, i)=>{\n            if (event.key.thumbprint() != prevKey.thumbprint())\n              return Promise.reject(\"thumbprint miss match in chain\")\n          })\n          return Promise.resolve(\"\")\n        })\n    }\n\n    public compareRealmHistory(realmA: Realm, realmB: Realm): Promise<any> {\n      return this.verifyRealmHistory(realmA)\n        .then(myThumbprint => this.verifyRealmHistory(realmB)\n          .then(otherThumbprint => myThumbprint == otherThumbprint ? Promise.resolve() : Promise.reject(\"key history didn't match\"))\n        )\n    }\n\n    // in case we are a controller - we also need to store binding\n    public setControllerBinding(cb: ControllerBinding):Promise<string> {\n      return this.storage.setObj(\"binding\", cb.toJSON())\n    }\n\n    public getControllerBinding():Promise<ControllerBinding> {\n      return this.storage.getObj(\"binding\")\n      .then(obj=>new ControllerBinding(obj))\n    }\n\n    public deleteControllerBinding():Promise<string> {\n      return this.storage.delete(\"binding\")\n    }\n\n\n\n}\n","/**\n * Abstract class for storage\n *\n */\n\nimport {Logger} from './Logger';\nvar logger = Logger.create(\"Storage\");\n\nexport class Storage {\n\n    public constructor() {\n    }\n\n    public set(key:string, value:string):Promise<string> {\n        throw new ReferenceError(\"set unimplemented. set \"+key)\n    }\n\n    public setObj(key:string, json:Object):Promise<string> {\n        let v = JSON.stringify(json);\n        return this.set(key,v);\n    }\n\n    public get(key:string):Promise<string> {\n        return Promise.reject(\"get not implemented\")\n    }\n\n    public getObj(key: string): Promise<any> {\n        return Promise.reject(\"getObj not implemented\")\n    }\n\n    public list():Promise<string[]> {\n        return Promise.reject(\"list not implemented\")\n    }\n\n    public delete(key:string):Promise<any> {\n        return Promise.reject(\"delete not implemented\")\n    }\n\n    public writeReadTest(k:string, d:string):Promise<boolean> {\n        return this.set(k,d)\n            .then(v => this.get(k))\n            .then(v => v == d)\n    }\n\n    public test() : Promise<boolean> {\n\n        let key = \"_test\";\n\n        return this.delete(key).then(ok=>this.writeReadTest(key, \"1\"))\n            .then(ok => {\n                logger.info(\"storage.test1-write \", ok)\n                if (!ok) throw new Error(\"bad\")\n                return this.writeReadTest(key, \"2\")\n            })\n            .then(ok => {\n                logger.info(\"storage.test2-delete \", ok);\n                return this.delete(key).then(k => {\n                    logger.info(\"storage.test2.deleted key: \", k)\n                    return ok\n                })\n            })\n            .then(ok => {\n                logger.info(\"storage.test3-get \", ok);\n                return this.get(key).then(v => {\n                    logger.info(\"storage.test3.deleted key-value: \", key, \"value: \", v)\n                    return ok\n                })\n            })\n            .catch(err => {\n                logger.error(\"storage.test.error: \", err, JSON.stringify(err,null,2))\n                return false\n            })\n    }\n\n\n}\n"],"names":["jose.JWS","jose","jose.JWK","crypto.createHash","crypto.createDecipher","crypto.createCipher","jose.util","jose.JWE","logger"],"mappings":"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"}