{"version":3,"file":"integrity-lib.umd.js","sources":["../src/brickchain/model/base.ts","../src/brickchain/model/realm-descriptor.ts","../src/brickchain/model/mandate.ts","../src/brickchain/model/mandatetoken.ts","../src/brickchain/model/action-descriptor.ts","../src/brickchain/model/certificate.ts","../src/brickchain/model/contract.ts","../src/brickchain/model/controller.ts","../src/brickchain/model/fact.ts","../src/brickchain/model/keypurpose.ts","../src/brickchain/model/revocation.ts","../src/brickchain/model/action.ts","../src/brickchain/model/scope.ts","../src/brickchain/model/signature-request.ts","../src/brickchain/model/url-response.ts","../src/brickchain/model/message.ts","../src/brickchain/model/multipart.ts","../src/brickchain/integrity.ts","../src/library.ts"],"sourcesContent":["\nimport * as v1 from '../schema/v1/index';\nimport * as v2 from '../schema/v2/index';\n\nexport class Base implements v2.Base {\n\n  /**\n   * Document type as URI, subtype after '#'.\n   */\n  public \"@type\": string;\n  /**\n   * Timestamp of when the document was created.\n   */\n  public \"@timestamp\": string;\n  /**\n   * A unique identifier of the document (uuid).\n   */\n  public \"@id\"?: string;\n  /**\n   * The certificate chain that was used as proof of current signature.\n   */\n  public \"@certificate\"?: string;\n  /**\n   * The name of the realm that issued this document.\n   */\n  public \"@realm\"?: string;\n\n  public constructor(type: string, time?:Date) {\n    this.setType(type)\n    this.setTimestamp(time?time:new Date())\n  }\n\n  public setType(type:string) {\n    this[\"@type\"] = type;\n  }\n\n  public getType() {\n    return this[\"@type\"];\n  }\n\n  public setTimestamp(time:Date) {\n    this[\"@timestamp\"] = time.toISOString();\n  }\n\n  public getTimestamp():Date {\n    return new Date(this[\"@timestamp\"]);\n  }\n\n  public setID(id:string) {\n    this[\"@id\"] = id;\n  }\n\n  public getID():string {\n    return this[\"@id\"];\n  }\n\n  public getCertificate():string {\n    return this[\"@certificate\"];\n  }\n\n  public setCertificate(jwsCert:string) {\n    this[\"@certificate\"] = jwsCert;\n  }\n\n  public getRealm():string {\n    return this[\"@realm\"];\n  }\n\n  public setRealm(realm:string) {\n    this[\"@realm\"] = realm;\n  }\n\n  public toJSON():any {\n    let json = Object.assign<any,any>({},this);\n    // clean out getters\n    if (\"context\" in json) delete json[\"context\"];\n    if (\"subtype\" in json) delete json[\"subtype\"];\n    return json\n  }\n\n  public parse(json:any):Base {\n      Object.assign(this, json);\n      return this; \n  }\n\n  /**\n   * 1 for V1 and 2 for V2 schema source.\n   */\n  public schemaVersion():number {\n    if (this.getType().indexOf(\":\") == -1) return 1;\n    return 2;  \n  }\n\n  /**\n   * V1 and V2 stores differently\n   */\n  get subtype():string {\n    if (this.getType().indexOf(\"#\")>0) {\n      return this.getType().substring(this.getType().indexOf(\"#\")+1)\n    }\n    return this[\"@subtype\"]\n  }\n\n  /**\n   * V1 - only\n   */\n  get context():string {\n    return this[\"@context\"]\n  }\n\n}\n","\nimport * as v1 from '../schema/v1/index';\nimport * as v2 from '../schema/v2/index';\n\nimport {Base} from \"./base\";\n\nexport class RealmDescriptor extends Base implements v2.RealmDescriptor{\n\n  public static TYPE = \"https://schema.brickchain.com/v2/realm-descriptor.json\"\n  public static TYPEv1 = \"realm-descriptor\";\n\n  /**\n   * The label of the Realm.\n   */\n  label?: string;\n  /**\n   * The public JWK of the Realm.\n   */\n  publicKey?: {\n    [k: string]: any;\n  };\n  /**\n   * The Invite URL for the Realm.\n   */\n  inviteURL?: string;\n  /**\n   * Location of where to find services published by the Realm.\n   */\n  servicesURL?: string;\n  /**\n   * The location of the icon used for displaying the Realm.\n   */\n  icon?:string;\n\n  /**\n   * The location of the banner used for displaying the Realm.\n   */\n  banner?: string;\n\n  public constructor(time?:Date) {\n      super(RealmDescriptor.TYPE, time);\n  }\n  \n  getLabel(): string {\n      return this.label; \n  }\n}\n","\nimport * as v1 from '../schema/v1/';\nimport * as v2 from '../schema/v2/';\n\nimport {Base} from \"./base\";\n\nexport class Mandate extends Base implements v2.Mandate {\n\n  public static TYPE = \"https://schema.brickchain.com/v2/mandate.json\";\n  public static TYPEv1 = \"mandate\";\n\n  role: string;\n  roleName?: string;\n  validFrom?: string;\n  validUntil?: string;\n  recipient: { [k: string]: any; };\n  sender?: string;\n  params?: { [k: string]: any; \".*\"?: string; };\n\n  public constructor(time?: Date) {\n    super(Mandate.TYPE, time)\n  }\n\n  public get validFromDate():Date { return new Date(this.validFrom); }\n  public get validUntilDate():Date { return new Date(this.validUntil);}\n\n  public setRole(role:string) {\n    this.role = role; \n  }\n  public setRoleName(roleName:string) {\n    this.roleName = roleName; \n  }\n  public setValidFrom(time:Date) {\n    this.validFrom = time.toISOString(); \n  }\n  public setValidUntil(time:Date) {\n    this.validUntil= time.toISOString(); \n  }\n  public setSender(userID:string) {\n    this.sender = userID; \n  }\n  public setParam(key:string, value:string) {\n    if (this.params == undefined) this.params = {};\n    this.params[key] = value; \n  }\n  public setRecipient(key:any) {\n    this.recipient = key; \n  }\n\n  public getRole():string {\n    return this.role; \n  }\n  public getRoleName():string {\n    return this.roleName; \n  }  \n  public getValidFrom():Date {\n    return this.validFromDate; \n  }\n  public getValidUntil():Date {\n    return this.validUntilDate;  \n  }\n  public getSender():string {\n    return this.sender;\n  }\n  public getParam(key:string) {\n    return this.params[key]; \n  }\n  public getParamKeys():string[] {\n    return this.params.keys()\n  }\n  public getRecipient():any {\n    return this.recipient;\n  }\n\n}\n","\n\nimport * as v1 from '../schema/v1/';\nimport * as v2 from '../schema/v2/';\n\nimport {Base} from \"./base\";\n\n/**\n * The Mandate Token is an encapsulated object containing Mandates. Used for inclusion in HTTP headers, when interacting with web views.\n */\nexport class MandateToken extends Base implements v2.MandateToken {\n\n  public static TYPE = \"https://schema.brickchain.com/v2/mandate.json\";\n  public static TYPEv1 = \"mandate\";\n\n  /**\n   * Can be multiple mandates encoded as compact JWS\n   */\n  mandates: string[];\n  /**\n   * The endpoint the client talks to (typically a web view).\n   */\n  uri?: string;\n  /**\n   * Seconds until expiration after the document was created (timestamp).\n   */\n  ttl: number;\n  \n  public constructor(time?: Date) {\n    super(MandateToken.TYPE, time)\n  }\n\n  \n}\n","\nimport * as v1 from '../schema/v1/index';\nimport * as v2 from '../schema/v2/index';\n\nimport {Base} from \"./base\";\nimport {Scope} from \"./scope\";\nimport {Contract} from \"./contract\";\n\n\nexport class ActionDescriptor extends Base implements v2.ActionDescriptor {\n\n  public static TYPE = \"https://schema.brickchain.com/v2/action-descriptor.json\"\n  public static TYPEv1 = \"action-descriptor\";\n\n  /**\n   * The label describing the Action Descriptor.\n   */\n  label: string;\n  /**\n   * A list of roles that can use the action, can be used to lookup mandates for action.\n   */\n  roles: string[];\n  /**\n   * Location of a web interface. Inline HTML data can be provided using a data URI.\n   */\n  uiURI?: string;\n  /**\n   * The URI where to perform the Action.\n   */\n  actionURI: string;\n  /**\n   * A URI where an updated version of this Action Descriptor can be retrieved. Used for dynamic Action Descriptor content, to include device state.\n   */\n  refreshURI?: string;\n  /**\n   * Additional parameters describing any necessary details of the service, used by Actions.\n   */\n  params?: {\n    [k: string]: any;\n  };\n  /**\n   * A list of scope objects, asking the user to share facts with the service controller when performing an Action.\n   */\n  scopes?: Scope[];\n  /**\n   * An icon to be used for displaying the Action Descriptor (png/jpg/svg).\n   */\n  icon?: string;\n  /**\n   * The minimum key level needed to perform the action.\n   */\n  keyLevel?: number;\n  /**\n   * An moption to not display this descriptor in listings.\n   */\n  internal?: boolean;\n  /**\n   * The message to display when signing the Action.\n   */\n  contract?: Contract; \n  \n  public constructor(time?:Date) {\n      super(ActionDescriptor.TYPE, time);\n  }\n\n  \n  \n}\n","\nimport * as v1 from '../schema/v1/index';\nimport * as v2 from '../schema/v2/index';\n\nimport {Base} from \"./base\";\n\nexport class Certificate extends Base implements v2.Certificate {\n\n  public static TYPE = \"https://schema.brickchain.com/v2/certificate.json\"\n  public static TYPEv1 = \"certificate-chain\";\n\n\n   /**\n   * Seconds until expiration after the document was created (timestamp).\n   */\n  ttl?: number;\n  /**\n   * The issuer key as JWK\n   */\n  issuer: {\n    [k: string]: any;\n  };\n  /**\n   * The subject key as JWK\n   */\n  subject: {\n    [k: string]: any;\n  };\n  /**\n   * A list of document types that the subject can sign.\n   */\n  documentTypes?: string[];\n  /**\n   * A list of roles that the subject can assume.\n   */\n  allowedRoles?: string[];\n  /**\n   * The minimum required key level for subsequent certificates in the certificate chain.\n   */\n  keyLevel: number;\n\n  public constructor(time?:Date) {\n      super(Certificate.TYPE, time);\n  }\n  \n}\n","\nimport * as v1 from '../schema/v1/index';\nimport * as v2 from '../schema/v2/index';\n\nimport {Base} from \"./base\";\n\n\n/**\n * NOTE: Contains to terms and conditions for login etc.\n * Use NOTE: https://tools.ietf.org/html/rfc2985\n * see: NaturalPersonAttributeSet ATTRIBUTE \n * \n * \n * https://tools.ietf.org/html/rfc5958\n * \n */\nexport class Contract extends Base implements v2.Contract {\n\n  public static TYPE = \"https://schema.brickchain.com/v2/contract.json\"\n  public static TYPEv1 = \"contract\";\n\n  text?: string;\n  attachments?: {\n    /**\n     * The name of the attachment.\n     */\n    name?: string;\n    /**\n     * The attachment data.\n     */\n    data?: string;\n    /**\n     * MIME type of the attachment.\n     */\n    encoding?: string;\n    [k: string]: any;\n  }[];\n\n\n  public constructor(time?:Date) {\n      super(Contract.TYPE, time);\n  }\n  \n}\n","\nimport * as v1 from '../schema/v1/index';\nimport * as v2 from '../schema/v2/index';\n\nimport {Base} from \"./base\";\nimport {KeyPurpose} from './keypurpose'\n\nexport class ControllerDescriptor extends Base implements v2.ControllerDescriptor{\n\n  public static TYPE = \"https://schema.brickchain.com/v2/controller-descriptor.json\"\n  public static TYPEv1 = \"controller-descriptor\";\n\n\n  /**\n   * The label of the Controller.\n   */\n  label?: string;\n  /**\n   * Used to retrieve Action Descriptors from controller.\n   */\n  actionsURI?: string;\n  /**\n   * The Admin UI, inline or URI.\n   */\n  adminUI?: string;\n  /**\n   * The location of the binding URI, used by the Realm.\n   */\n  bindURI: string;\n  /**\n   * The controller's public key as JWK.\n   */\n  key: {\n    [k: string]: any;\n  };\n  /**\n   * An array of keypurposes, describes document types for the controller's certificate.\n   */\n  keyPurposes?: KeyPurpose[];\n  /**\n   * An indication that the Controller needs configuration.\n   */\n  requireSetup?: boolean;\n  /**\n   * Can be used to create new empty bindings on the controller.\n   */\n  addBindingEndpoint?: string;\n  /**\n   * An icon for the controller.\n   */\n  icon?: string;\n\n  public constructor(time?:Date) {\n      super(ControllerDescriptor.TYPE, time);\n  }\n  \n}\n\nexport class ControllerBinding extends Base implements v2.ControllerBinding{\n\n  public static TYPE = \"https://schema.brickchain.com/v2/controller-binding.json\"\n\n  /**\n   * The Realm Descriptor object.\n   */\n  realmDescriptor: {\n    [k: string]: any;\n  };\n  /**\n   * An array of admin roles that are allow to manage the Controller.\n   */\n  adminRoles: string[];\n  /**\n   * A Controller Certificate given from the Realm.\n   */\n  controllerCertificate: string;\n  /**\n   * A list of Mandates that allows the controller to act as a certain role in the realm.\n   */\n  mandates?: string[];\n\n  public constructor(time?:Date) {\n      super(ControllerBinding.TYPE, time);\n  }\n  \n}\n","\nimport * as v1 from '../schema/v1/index';\nimport * as v2 from '../schema/v2/index';\n\nimport {Base} from \"./base\";\n\n/**\n *  A Fact is a personal attribute certified by signatories. \n *  \"data\" can be anything that we can run JSON.stringify on.\n *  \n */\nexport class Fact extends Base implements v2.Fact{\n\n  public static TYPE = \"https://schema.brickchain.com/v2/fact.json\"\n  public static TYPEv1 = \"fact\";\n\n  /**\n   * The fact itself, can be more than one fact of each type.\n   */\n  data: any; \n\n  /**\n   * The human readable label of the fact.\n   */\n  label: string;\n  /**\n   * An array of Fact Signatures.\n   */\n  signatures?: FactSignature[];\n\n  /**\n   * any add on data.\n   */\n  [k: string]: any;\n\n  public constructor(time?:Date) {\n      super(Fact.TYPE, time);\n  }\n  \n}\n\nexport class FactSignature implements v2.FactSignature {\n  /**\n   * The certificate from the issuing realm.\n   */\n  certificate?: string;\n  /**\n   * The date and time of the issued fact signature.\n   */\n  timestamp: string;\n  /**\n   * The date and time of when this fact signature expires.\n   */\n  expires?: string;\n  /**\n   * The subject the signature is issued for as a JWK\n   */\n  subject: {\n    [k: string]: any;\n  };\n  /**\n   * The checksum of the fact that this fact signature covers.\n   */\n  hash: string;\n  /**\n   * TODO\n   */\n  metadata?: {\n    \".*\"?: string;\n    [k: string]: any;\n  };\n  [k: string]: any;\n\n  public constructor() {\n\n  }\n}\n","\nimport * as v1 from '../schema/v1/index';\nimport * as v2 from '../schema/v2/index';\n\nexport class KeyPurpose implements v2.KeyPurpose {\n    /**\n     * The document type needed in the certificate.\n     */\n    documentType: string;\n    /**\n     * This document type may be optional or required.\n     */\n    required?: boolean;\n    /**\n     * The description of (the requirement of) the document type.\n     */\n    description?: string;\n\n    public constructor() {\n    }\n\n  }\n","\nimport * as v1 from '../schema/v1/index';\nimport * as v2 from '../schema/v2/index';\n\nimport {Base} from \"./base\";\n\nexport class Revocation extends Base implements v2.Revocation{\n\n  public static TYPE = \"https://schema.brickchain.com/v2/revocation.json\"\n\n  /**\n   * This object is a Brickchain Revocation Checksum document.\n   */\n  checksum: {\n    [k: string]: any;\n  };\n\n  public constructor(time?:Date) {\n      super(Revocation.TYPE, time);\n  }\n  \n}\n\nexport class RevocationChecksum extends Base implements v2.RevocationChecksum {\n\n  public static TYPE = \"https://schema.brickchain.com/v2/revocation-checksum.json\"\n\n  /**\n   * This string contains the checksum (encoded as a multihash) of a revoked signed document.\n   */\n  multihash: string;\n\n  public constructor(time?:Date) {\n      super(Revocation.TYPE, time);\n  }\n  \n}\n\nexport class RevocationRequest extends Base implements v2.RevocationRequest {\n\n  public static TYPE = \"https://schema.brickchain.com/v2/revocation-request.json\"\n  public static TYPEv1 = \"revocation\";\n\n\n  /**\n   * This is the original signed document to be revoked.\n   */\n  jws: {\n    [k: string]: any;\n  };\n  /**\n   * The is the Revocation Checksum document to be published as a revocation.\n   */\n  revocationchecksum: {\n    [k: string]: any;\n  };\n  /**\n   * This is the priority of the Revocation Request, indicating the urgency of the Revocation to be published.\n   */\n  priority: number;\n\n  public constructor(time?:Date) {\n      super(Revocation.TYPE, time);\n  }\n  \n}","\nimport * as v1 from '../schema/v1/index';\nimport * as v2 from '../schema/v2/index';\n\nimport {Base} from \"./base\";\n\nexport class Action extends Base implements v2.Action {\n\n  public static TYPE = \"https://schema.brickchain.com/v2/action.json\"\n  public static TYPEv1 = \"action\";\n\n  /**\n   * A list of Mandates used for the Action.\n   */\n  mandates: string[];\n  /**\n   * The nonce used for the Action to prevent replay attacks.\n   */\n  nonce?: string;\n  /**\n   * Additional parameters needed to perform the Action. It is up to the receiving controller to determine the use of the parameters.\n   */\n  params?: {\n    [k: string]: any;\n  };\n  /**\n   * All shared facts needed to perform the Action.\n   */\n  facts?: string[];\n  /**\n   * The signed Contract (compact encoded JWS) that was shown when the Action was signed.\n   */\n  contract?: string;\n  \n  public constructor(time?:Date) {\n      super(Action.TYPE, time);\n  }\n  \n}\n","\nimport * as v1 from '../schema/v1/index';\nimport * as v2 from '../schema/v2/index';\n\nimport {Base} from \"./base\";\nimport {Contract} from \"./contract\";\n\nexport class ScopeRequest extends Base implements v2.ScopeRequest {\n\n  public static TYPE = \"https://schema.brickchain.com/v2/scope-request.json\"\n  public static TYPEv1 = \"scope-request\";\n\n  /**\n   * A list of callback addresses of where to send a response.\n   */\n  replyTo: string[];\n  /**\n   * An array of Scope objects.\n   */\n  scopes: Scope[];\n  /**\n   * The minimum required key level that signs the response.\n   */\n  keyLevel?: number;\n  /**\n   * The Contract, a message to display to the user.\n   */\n  contract?: Contract[];\n\n  /**\n   * This string contains the checksum (encoded as a multihash) of a revoked signed document.\n   */\n  multihash: string;\n\n  public constructor(time?:Date) {\n      super(ScopeRequest.TYPE, time);\n  }\n  \n}\n\n/**\n * scope is used in scope-request and login-request.\n */\nexport class Scope implements v2.Scope{\n\n  /**\n   * The name of the Scope.\n   */\n  name: string;\n  /**\n   * An URI of where to retrieve a fact of this type of fact.\n   */\n  link?: string;\n  /**\n   * This fact may be optional or required.\n   */\n  required?: boolean;\n \n  public constructor(name?:string) {\n    this.name = name; \n  }\n  \n}\n","\nimport * as v1 from '../schema/v1/index';\nimport * as v2 from '../schema/v2/index';\n\nimport {Base} from \"./base\";\nimport {Contract} from \"./contract\";\n\nexport class SignatureRequest extends Base implements v2.SignatureRequest {\n\n  public static TYPE = \"https://schema.brickchain.com/v2/signature-request.json\";\n  public static TYPEv1 = \"signature-request\";\n  \n  /**\n   * A list of callback addresses of where to send a response.\n   */\n  replyTo: string[];\n  /**\n   * The contract requested for signing.\n   */\n  contract: Contract[];\n  /**\n   * The minimum required key level.\n   */\n  keyLevel?: number;\n\n  public constructor(time?:Date) {\n      super(SignatureRequest.TYPE, time);\n  }\n  \n}\n","\nimport * as v1 from '../schema/v1/index';\nimport * as v2 from '../schema/v2/index';\n\nimport {Base} from \"./base\";\n\nexport class UrlResponse extends Base implements v2.UrlResponse {\n\n  public static TYPE = \"https://schema.brickchain.com/v2/url-response.json\"\n  public static TYPEv1 = \"url-response\"\n\n /**\n   * The URL.\n   */\n  url: string;\n  \n  public constructor(time?:Date) {\n      super(UrlResponse.TYPE, time);\n  }\n  \n}\n","\nimport * as v1 from '../schema/v1/index';\nimport * as v2 from '../schema/v2/index';\n\nimport {Base} from \"./base\";\n\nexport class Message extends Base implements v2.Message {\n\n  public static TYPE = \"https://schema.brickchain.com/v2/message.json\"\n  public static TYPEv1 = \"message\";\n\n\n   /**\n   * The message title.\n   */\n  title?: string;\n  /**\n   * The content of the message.\n   */\n  message?: string;\n\n  public constructor(time?:Date) {\n      super(Message.TYPE, time);\n  }\n  \n}\n","\nimport * as v1 from '../schema/v1/index';\nimport * as v2 from '../schema/v2/index';\n\nimport {Base} from \"./base\";\nimport {Integrity} from \"../integrity\";\n\nexport class Multipart extends Base implements v2.Multipart{\n\n  public static TYPE = \"https://schema.brickchain.com/v2/multipart.json\"\n  public static TYPEv1 = \"multipart\";\n\n\n  parts: {\n    /**\n     * The used encoding of the document part.\n     */\n    encoding?: string;\n    /**\n     * The name of the part.\n     */\n    name?: string;\n    /**\n     * The document itself.\n     */\n    document?: string;\n    /**\n     * TODO\n     */\n    uri?: string;\n  }[];\n  \n  public constructor(time?:Date) {\n      super(Multipart.TYPE, time);\n  }\n  \n  async parseParts(integrity:Integrity, allowEmbeddedKey:boolean) {\n    let list = new Array()\n    for (let i in this.parts) {\n        let part = this.parts[i];\n        let doc = await this.parsePart(part,integrity, allowEmbeddedKey)\n        list.push(doc)\n    }\n    return list; \n  }\n\n  async parsePart(part, integrity:Integrity, allowEmbeddedKey:boolean) {\n    let json = part.document;\n    let jws;\n    if (part.encoding.indexOf(\"+jws\") > 0) {\n        jws = json\n        json = await integrity.verified(jws, allowEmbeddedKey)\n    }\n    let doc = integrity.parseJSONSchema(JSON.parse(json));\n    if (jws) doc.signature = jws;\n    return doc\n  }\n\n}\n","\nimport * as jose from \"node-jose\"\n\nimport * as v1 from './schema/v1/index';\nimport * as v2 from './schema/v2/index';\n\nimport {\n  Base, \n    Action, ActionDescriptor, \n    Certificate, Contract, \n    ControllerDescriptor, ControllerBinding, \n    Fact, FactSignature, KeyPurpose, \n    RealmDescriptor, Mandate, MandateToken, \n    Revocation, RevocationChecksum, RevocationRequest, \n    ScopeRequest, Scope,\n    SignatureRequest, UrlResponse, Message, Multipart\n} from './model/'\n\nfunction getRoot() {\n  // Establish the root object, `window` in the browser, or `global` on the server.\n  let root = this; \n  return root;\n}\n\n/**\n * Key handling for integrity clients and controllers.\n *\n * Rules for key \"kid\" and \"use\":\n *\n *   realms are prefixed with realm-[domain-name]\n *   controllers are prefixed with realm-[domain-name]#[id]\n *   users are prefixed with user-[id]\n *\n * Use:\n *   \"device\", \"sign\", \"access\", \"root\", \"...\"\n *\n * Certificate storage & history:\n *   callback binding to store and retreve history of objects.\n *\n */\nexport class Integrity {\n\n    public static OP_SET = \"set\";\n    public static OP_DEL = \"add\";\n\n    private keystorage: jose.JWK.KeyStorage;\n    private privateKeyName: string;\n    private privateKey: jose.JWK;\n    private verifier: jose.JWS.Verifier;\n    private changeCallback: (key:jose.Key, op:string, keystore:jose.JWK.KeyStorage)=>any\n\n    private constructor(keystorage: jose.KeyStorage, privateKeyName : string = \"master\") {\n        this.keystorage = keystorage;\n        this.privateKeyName = privateKeyName;\n    }\n\n    public static async CreateIntegrity(\n      changeCallback: (key:jose.Key, op:string, keystore:jose.JWK.KeyStorage)=>any):Promise<Integrity> {\n        let storage = await jose.JWK.createKeyStore();\n        return Integrity.LoadIntegrity(storage, changeCallback)\n    }\n\n    public static async LoadIntegrity(\n      storage: any,\n      changeCallback: (key:jose.Key, op:string, keystore:jose.JWK.KeyStorage)=>any):Promise<Integrity> {\n        let ks = await jose.JWK.asKeyStore(storage)\n        let i = new Integrity(ks)\n        i.verifier = await jose.JWS.createVerify(ks)\n        i.changeCallback = changeCallback;\n        return i;\n    }\n\n    private notify(key:jose.Key, op:string):Promise<any> {\n        if (this.changeCallback) {\n          try {\n            this.changeCallback(key, op, this.keystorage)\n          } catch (err) {\n            return Promise.reject(err)\n          }\n        }\n        return Promise.resolve()\n    }\n\n    public async setPrivate(key: jose.Key) : Promise<jose.Key> {\n        if (key.kid == this.privateKeyName) {\n            this.privateKey = key;\n        }\n        let k = await this.keystorage.add(key)\n        await this.notify(k, Integrity.OP_SET)\n        return k\n    }\n\n    public async getPrivate(kid: string = \"\") {\n        if (kid == this.privateKeyName || kid == \"\") {\n          if (!this.privateKey) {\n              this.privateKey = await this.keystorage.get(this.privateKeyName, {}, true);\n          }   \n          return this.privateKey;\n        } \n        return await this.keystorage.get(kid, {}, true);\n    }\n\n    public async createPrivate(kid:string, use:string = \"master\") : Promise<jose.Key> {\n        let k = await this.keystorage.generate('EC', 'P-256', {kid: kid, use:use });\n        await this.notify(k, Integrity.OP_SET)\n        return k;\n    }\n\n    // Adds a singed key as \"signedPublicKey\" to key.\n    public async signPublicKey(pubKey: jose.Key): Promise<jose.JWS> {\n\n      let privateKey = this.getPrivate()\n\n      let jws = await jose.JWS.createSign(\n        { format: 'flattened' },\n        { key: privateKey, reference: 'jwk' }\n      ).update(JSON.stringify(pubKey), 'utf8').final()\n\n      return jws;\n    }\n\n    public async deleteKey(kid:string):Promise<any> {\n      let k = await this.keystorage.remove(kid)\n      if (k) await this.notify(k, Integrity.OP_DEL)\n      return k\n    }\n\n    private async parseAndAddKey(name:string, json:any): Promise<jose.Key> {\n      if (typeof json == 'string') json = JSON.parse(json)\n      json.kid = name; \n      let key = await this.keystorage.add(json);\n      if (key) await this.notify(key, Integrity.OP_SET)\n      return key;\n    }\n\n    public getKey(name: string): Promise<jose.Key> {\n      return this.keystorage.get(name);\n    }\n\n    public addKey(jwk: any): Promise<jose.Key> {\n      return this.keystorage.add(jwk);\n    }\n\n    public createCertificate(\n        subKey: jose.Key,\n        keyType: string = '*',\n        documentTypes: string[] = ['*'],\n        ttl: number = 3600): Promise<jose.Key> {\n\n        return this.getKey('root')\n            .then(rootKey => <jose.CertificateChain> {\n                timestamp: new Date(),\n                root: rootKey.publicKey,\n                subKey: subKey.publicKey,\n                keyType: keyType,\n                documentTypes: documentTypes,\n                ttl: ttl,\n            })\n            .then(chain => this.signCompact('root', chain))\n            .then(chain => subKey.certificateChain = chain)\n            .then(() => subKey)\n    }\n\n\n    public async sign(keyName: string, input: any, compact: boolean = false): Promise<any> {\n      let pkey = await this.getPrivate(keyName)\n      let buf = typeof (input) == 'string' ? input : JSON.stringify(input)\n      let fmt:any = compact ? {format: \"compact\"} : {}\n      let jws = jose.JWS.createSign(fmt, { key: pkey, reference: 'jwk' })\n      // console.debug(\"sign: \", jws, pkey)\n      return await jws.final(buf, 'utf8')\n    }\n\n    public signCompact(keyName: string, input: any): Promise<string> {\n      return this.sign(keyName, input, true)\n    }\n\n    public encrypt(recipient: jose.Key, input: any): Promise<any> {\n        let buf = (typeof (input) == 'string') ? input : JSON.stringify(input)\n        return jose.JWE.createEncrypt(\n          { protect: ['enc'], contentAlg: 'A256GCM' },recipient)\n          .final(buf)\n    }\n\n    // validate and return verify result\n    public verify(jws: any, allowEmbeddedKey = false): Promise<any> {\n\n        if (typeof jws === 'string') {\n          if (jws[0] != '{') { // compact form to jws conversion\n            let parts = jws.split(\".\");\n            jws = {\n              protected: parts[0],\n              payload: parts[1],\n              signature: parts[2]\n            }\n          } else {\n            jws = JSON.parse(jws);\n          }\n        }\n\n        return this.verifier.verify(jws, {allowEmbeddedKey: allowEmbeddedKey})\n    }\n\n    // validate and return payload as string\n    public verified(jws: any, allowEmbeddedKey = false): Promise<string> {\n        return this.verify(jws, allowEmbeddedKey)\n            .then(verified =>  verified.payload.toString(\"utf8\"))\n    }\n\n    // validate and return payload as string\n    public async verifiedJSON(jws: any): Promise<string> {\n        let json = await this.verified(jws)\n        return JSON.parse(json)\n    }\n\n    public createType(type:string):Base {\n      switch(type) {\n        case Action.TYPE:\n        case Action.TYPEv1:\n            return new Action();\n\n        case ActionDescriptor.TYPEv1:\n        case ActionDescriptor.TYPE:\n          return new ActionDescriptor();\n\n        case RealmDescriptor.TYPEv1:\n        case RealmDescriptor.TYPE:\n          return new RealmDescriptor();\n\n        case Certificate.TYPE: \n          return new Certificate();\n\n        case ControllerDescriptor.TYPE:\n        case ControllerDescriptor.TYPEv1:\n          return new ControllerDescriptor();\n        case ControllerBinding.TYPE:\n          return new ControllerBinding(); \n\n        case Multipart.TYPE:\n        case Multipart.TYPEv1:\n            return new Multipart();  \n\n        case ScopeRequest.TYPE:\n        case ScopeRequest.TYPEv1:\n            return new ScopeRequest();  \n\n        case SignatureRequest.TYPE:\n        case SignatureRequest.TYPEv1:\n            return new SignatureRequest();  \n    \n        case Mandate.TYPE:\n        case Mandate.TYPEv1:\n            return new Mandate();\n\n        case MandateToken.TYPE:\n        case MandateToken.TYPEv1:\n            return new MandateToken();\n    \n        case Fact.TYPE:\n        case Fact.TYPEv1:\n            return new Fact();\n\n        case Message.TYPE:\n        case Message.TYPEv1:\n            return new Message();\n\n        case UrlResponse.TYPE:\n        case UrlResponse.TYPEv1:\n            return new UrlResponse();\n\n        }\n        throw new Error(\"unknown type: \"+type)\n    }\n\n    // parse brickchain protocol objects\n    public parseJSONSchema(json: any): any {\n      let type = json[\"@type\"]\n      let i = type.indexOf(\"#\");\n      if (i > 0) type = type.substring(0,i);\n      let obj = this.createType(type);\n      obj.parse(json);\n      return obj; \n    }\n\n    async parseMultipart(json, allowEmbeddedKey = false) {\n      let mp = this.parseJSONSchema(json)\n      if (mp.getType() != Multipart.TYPE && \n          mp.getType() != Multipart.TYPEv1) {\n          throw new Error(\"unexpected response, expecting multipart: \"+mp.toJSON())\n      }\n      return await mp.parseParts(this, allowEmbeddedKey); \n    }\n\n    public async factHash(fact: Fact):Promise<string> {\n      let dataString =JSON.stringify(fact.data);\n      let hash = await this.digest(\"SHA-256\",dataString);\n      return hash; \n    }\n\n    private async digest(hash, pdata, fmt = \"hex\") : Promise<string> {\n      let window = getRoot()\n      if (window.crypto && window.crypto.subtle) { // browser\n        let alg = {name: hash}; // \"SHA-256\"\n        let hbuf = await window.crypto.subtle.digest(alg, pdata)\n        if (fmt == \"hex\") {\n          const hArray = Array.from(new Uint8Array(hbuf));\n          return hArray.map(b => ('00' + b.toString(16)).slice(-2)).join('');\n        } else if (fmt == 'base64') {\n          return window.btoa(hbuf)\n        }\n        return hbuf.toString(fmt)\n      } else { // node\n        let crypto = require(\"crypto\") // \"sha256\"\n        let md = hash.replace(\"SHA-\", \"SHA\").toLowerCase();\n        let digest = crypto.createHash(md)\n        digest.update(pdata);\n        return Promise.resolve(digest.digest(fmt))\n      }\n    }\n\n    /**\n     * create mandate token as a compact jws\n     * mandates can be mandates with signatures or just the compact-jws signatures.\n     */\n    public mandateToken(mandates:any[], ttl = 60000, keyId = \"\") : Promise<string> {\n        if (!mandates || mandates.length == 0) return undefined;\n        let token = new MandateToken()\n        token.mandates = mandates.map(m => typeof(m) == 'string' ? m : m.signature); \n        token.ttl = ttl \n        return this.signCompact(keyId, token)\n    }\n    \n    /**\n     * read all certificats, if signed with key we have, add signed key to keystore.\n     * @param list - list of model.base docs.\n     */\n    public async addCertificates(list:Base[]) { // bad certs will blow this!\n      for (let i in list) {\n          let a = list[i]\n          let jws = a[\"@certificate\"]\n          if (jws) {\n              let json = await this.verified(jws)\n              let cert = JSON.parse(json)\n              if (!await this.getKey(cert.subject.kid)) {\n                  await this.addKey(cert.subject)\n              }\n          }\n      }\n    }\n\n    // parse realm description in JWS, verify signature and store keys.\n    public async parseSignedRealm(name: string, jws: any, importKey:boolean = true): Promise<RealmDescriptor> {\n\n      if (typeof (jws) == 'string') jws = JSON.parse(jws)\n\n      // get key out and verify that we have it. assumes full JWS. \n      let pText = Buffer.from(jws.protected, \"base64\").toString('utf8')\n      let pJSON = JSON.parse(pText);\n      let pKey = await this.getKey(pJSON.kid);\n      if (!pKey) {\n        if (!importKey) throw new Error(\"unknown key in signature: \"+pJSON.kid);\n        pKey = await this.parseAndAddKey(pJSON.kid, pJSON.jwk)\n        // console.log(\"added new key: \"+pKey)\n      }\n\n      let result = await this.verifier.verify(jws);\n      let obj = JSON.parse(result.payload);\n      if (name != '*' && obj.name != name) throw new Error(\"Name does not match\");\n\n      let realm = Object.assign(new RealmDescriptor(), obj);\n      realm.timestamp = new Date(obj[\"@timestamp\"]);\n      // realm.signed = JSON.stringify(jws);\n      realm.icon = obj.icon ? obj.icon : '';\n      realm.banner = obj.banner ? obj.banner : '';\n\n      let pubKey = await jose.JWK.asKey(obj.publicKey, 'json')\n      realm.publicKey = pubKey;\n\n      return realm;\n\n    }\n\n    // encode strings, objects, arrays into reproduceable string\n    // note, this is v0 formating expect multihash/multibase\n    // see: https://github.com/multiformats/multibase\n    public jsonHash(data:any):Promise<string> {\n\n      // let hash = (obj) => {\n      //   return crypto.createHash('SHA256').update(obj).digest('hex')\n      // }\n\n      let serialize = function(d) {\n        let o = [];\n\n        Object.keys(d).sort().forEach(k => {\n            let v = d[k]\n            switch (typeof v) {\n              case 'string':\n                o.push(k+':'+v)\n                break;\n              case 'object':\n                if (Array.isArray(v)) {\n                    let s = []\n                    v.forEach(v => {\n                        if (typeof v == 'object') s.push(serialize(v));\n                        else s.push(v);\n                    })\n                    o.push(k+':['+s.join('|')+']')\n                } else {\n                    o.push(k+':'+serialize(v))\n                }\n                break;\n              default:\n                throw \"values of type \"+typeof v + \"not supported\";\n            }\n          })\n        return '{'+o.join(\"|\")+'}'\n      }\n      return this.digest(\"SHA-256\", serialize(data), \"hex\")\n    }\n\n\n/*\n    private verifyRealmHistory(realm: RealmDescriptor): Promise<string> {\n      let prevKey: any = realm.publicKey;\n      let pl: Promise<any>[] =\n        realm.keyHistory.reverse()\n        .map((eventJWS) => this.verifier.verify(eventJWS))\n\n      return Promise.all(pl)\n        .then(events=>{\n          events.forEach((event, i)=>{\n            if (event.key.thumbprint() != prevKey.thumbprint())\n              return Promise.reject(\"thumbprint miss match in chain\")\n          })\n          return Promise.resolve(\"\")\n        })\n    }\n\n    public compareRealmHistory(realmA: RealmDescriptor, realmB: RealmDescriptor): Promise<any> {\n      return this.verifyRealmHistory(realmA)\n        .then(myThumbprint => this.verifyRealmHistory(realmB)\n          .then(otherThumbprint => myThumbprint == otherThumbprint ? Promise.resolve() : Promise.reject(\"key history didn't match\"))\n        )\n    }\n    */\n}\n","/**\n * Full library exporting these packages.  \n */\n\nimport { Integrity } from \"./brickchain/\"\n\nimport { Base, \n    Action, ActionDescriptor, \n    Certificate, Contract, \n    ControllerDescriptor, ControllerBinding, \n    Fact, FactSignature, KeyPurpose, \n    RealmDescriptor, Mandate, MandateToken,\n    Revocation, RevocationChecksum, RevocationRequest, \n    ScopeRequest, Scope,\n    SignatureRequest, UrlResponse, Message, Multipart } from \"./brickchain/model/\"\n\nexport { Integrity,\n    Base, \n    Action, ActionDescriptor, \n    Certificate, Contract, \n    ControllerDescriptor, ControllerBinding, \n    Fact, FactSignature, KeyPurpose, \n    RealmDescriptor, Mandate, MandateToken,\n    Revocation, RevocationChecksum, RevocationRequest, \n    ScopeRequest, Scope,\n    SignatureRequest, UrlResponse, Message, Multipart }\n"],"names":["jose.JWK","jose.JWS","jose.JWE"],"mappings":"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"}